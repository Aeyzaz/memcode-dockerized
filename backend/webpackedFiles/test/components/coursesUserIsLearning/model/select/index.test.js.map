{"version":3,"sources":["webpack:///webpack/bootstrap 739628366e8a6c91c489?d06b*","webpack:///./db/init.js?a325*","webpack:///./services/requireKeys.js?30f5*","webpack:///external \"pg-promise\"?6c47*","webpack:///./components/coursesUserIsLearning/model/index.js?a3ad*","webpack:///./services/camelizeDbColumns.js?1dfb*","webpack:///./components/courses/model/index.js?927b*","webpack:///external \"chai\"?e564","webpack:///./components/problemsUserIsLearning/model/index.js?df77*","webpack:///./components/users/model/index.js?a181*","webpack:///./components/courses/model/select/services/wherePublic.js?c3b6*","webpack:///./components/problems/model/index.js?a800*","webpack:///./components/problemsUserIsLearning/model/select.js?1fb7*","webpack:///./services/integerizeDbColumns.js?497c*","webpack:///./components/problemsUserIsLearning/services/getNextScore.js?aa55*","webpack:///./components/problemsUserIsLearning/services/initialScore.js?8a9e*","webpack:///./components/courses/model/ddelete.js?1b58*","webpack:///./components/courses/model/insert.js?e09c*","webpack:///./components/courses/model/select/index.js?8a07*","webpack:///./components/courses/model/select/services/getCoursesWithStats.js?8b73*","webpack:///./components/courses/model/update.js?09c4*","webpack:///./components/users/model/insert.js?4ca0*","webpack:///./components/users/model/select.js?6238*","webpack:///./components/users/model/update.js?7404*","webpack:///./components/coursesUserIsLearning/model/insert.js?8624*","webpack:///./components/coursesUserIsLearning/model/select/index.js?a336*","webpack:///./components/coursesUserIsLearning/model/update.js?0852*","webpack:///./components/problems/model/ddelete.js?1510*","webpack:///./components/problems/model/insert.js?439b*","webpack:///./components/problems/model/select.js?e35b*","webpack:///./components/problemsUserIsLearning/model/ddelete.js?5796*","webpack:///./components/problemsUserIsLearning/model/insert.js?7a02*","webpack:///./components/problemsUserIsLearning/model/update.js?d0de*","webpack:///./test/services/Factory.js","webpack:///./components/coursesUserIsLearning/model/select/index.test.js"],"names":["pgPromise","camelizeColumns","data","template","prop","camel","utils","camelize","map","d","pgOptions","query","e","receive","noWarnings","process","env","NODE_ENV","getConnectionString","host","port","database","user","password","DATABASE_URL","pgPackage","default","db","connect","then","obj","done","catch","error","console","log","message","requireKeys","requiredKeys","functionBeingValidated","realArgs","forEach","key","undefined","Error","select","insert","update","camelizeHashKeys","oldHash","newHash","Object","keys","camelizedKey","camelizeColumnsIn","aOld","asTitlesArray","aNew","includes","camelizeDbColumns","arrayOrHash","columnTitlesArray","Array","isArray","hash","ddelete","wherePublic","problem","problemId","one","content","id","allByCuilId","cuilId","any","findByCuilIdAndProblemId","integerizeColumnsIn","parseInt","integerizeDbColumns","getNextScore","prevEasiness","prevConsecutiveCorrectAnswers","performanceRating","nextEasiness","clipEasiness","nextConsecutiveCorrectAnswers","isAnswerCorrect","daysToNextReview","clipDaysToNextReview","easiness","consecutiveCorrectAnswers","Math","max","days","min","initialScore","destroyCourseWithProblems","courseId","none","create","course","title","description","ifPublic","courseCategoryId","userId","allCreated","where","params","allLearned","orderBy","allPublic","sortBy","limit","offset","array","countAllPublic","result","amountOfPublicCourses","oneForActions","getCourseStats","oneById","search","searchString","getCoursesWithStats","values","createFrom","oauthProvider","oauthProfile","oauthId","toString","username","login","avatarUrl","avatar_url","email","name","picture","oneByOauth","oneOrNone","cuilFields","oneByCourseIdAndUserId","problemsToReview","idsOfProblemsToLearnAndReviewPerCourse","toReview","toLearn","toLearnToReviewResponse","toReviewResponse","correspondingToLearnResponse","find","toLearnResponse","ifActive","active","deleteMany","problemIds","type","createManyFromExcel","problems","tx","transaction","queries","answer","batch","moveToCourseMany","promises","problemPromise","Promise","all","allByCourseId","courseUserIsLearningId","ifIgnored","review","me","nextScore","ignore","User","Course","Problem","CourseUserIsLearning","ProblemUserIsLearning","uniqueIndex","RawFactory","userFields","courseFields","problemFields","courseUserIsLearning","problemUserIsLearning","puilFields","Factory","publicCourse","describe","beforeEach","it","to","deep","equal","problem_1","problem_2","cuil","problem_3"],"mappings":"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","file":"test/components/coursesUserIsLearning/model/select/index.test.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 73);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 739628366e8a6c91c489","import * as pgPromise from 'pg-promise';\n\n// for pgOptions\n/* eslint-disable */ // because it's taken from online source, may want to rewrite some time\nconst camelizeColumns = (data) => {\n  const template = data[0];\n  for (let prop in template) {\n    const camel = pgPromise.utils.camelize(prop);\n    if (!(camel in template)) {\n      data.map((d) => {\n        d[camel] = d[prop];\n        delete d[prop];\n      });\n    }\n  }\n};\n\nconst pgOptions = {\n  query: (e) => {\n    // const cyan = \"\\x1b[36m%s\\x1b[0m\";\n    // console.log(cyan, e.query); // log the query being executed\n  },\n  // https://coderwall.com/p/irklcq\n  receive: (data) => {\n    camelizeColumns(data);\n  },\n  // disable warnings for tests,\n  // because it was complaining a lot about duplicated connection\n  noWarnings: process.env.NODE_ENV === 'test'\n};\n\nconst getConnectionString = () => {\n  switch (process.env.NODE_ENV) {\n    // pgweb: postgres://postgres:§1§1§1@localhost:5432/memcode\n    case 'development':\n      return {\n        host: 'localhost', // 'localhost' is the default;\n        port: 5432, // 5432 is the default;\n        database: 'memcode',\n        user: process.env['DB_USER'],\n        password: process.env['DB_PASSWORD']\n      };\n    case 'test':\n      return {\n        host: 'localhost', // 'localhost' is the default;\n        port: 5432, // 5432 is the default;\n        database: 'memcode_test',\n        user: process.env['DB_USER'],\n        password: process.env['DB_PASSWORD']\n      };\n    case 'production':\n      // this variable is set automatically after we do heroku addons:create heroku-postgresql:hobby-dev\n      return process.env.DATABASE_URL;\n  }\n};\n\nconst pgPackage = pgPromise.default(pgOptions);\nconst db = pgPackage(getConnectionString());\ndb.connect()\n  .then((obj) => {\n    obj.done(); // success, release the connection;\n  })\n  .catch((error) => {\n    console.log(\"ERROR:\", error.message || error);\n  });\n\nexport { db };\n\n\n\n// WEBPACK FOOTER //\n// ./db/init.js","// const b = requireKeys(\n//   ['userId', 'title'], // what to validate\n//   (args) => {\n//     console.log('creating a comment with title=' + args.title);\n//   }\n// )\n\n// b({ userId: 'wow' })\nconst requireKeys = (requiredKeys, functionBeingValidated) =>\n  (realArgs) => {\n    requiredKeys.forEach((key) => {\n      if (realArgs[key] === undefined) {\n        throw new Error(`${key} is required in function, but is undefined`);\n      }\n    });\n\n    return functionBeingValidated(realArgs);\n  };\n\nexport { requireKeys };\n\n\n\n// WEBPACK FOOTER //\n// ./services/requireKeys.js","module.exports = require(\"pg-promise\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pg-promise\"\n// module id = 4\n// module chunks = 0 1 2 3 4","// CREATE TABLE course_user_is_learning (\n//   id SERIAL PRIMARY KEY,\n\n//   active BOOLEAN,\n\n//   course_id INTEGER REFERENCES course (id) ON DELETE CASCADE,\n//   user_id INTEGER REFERENCES \"user\" (id) ON DELETE CASCADE,\n//   unique (course_id, user_id)\n// );\n\nimport { select } from './select';\nimport { insert } from './insert';\nimport { update } from './update';\n\nexport { select, insert, update };\n\n\n\n// WEBPACK FOOTER //\n// ./components/coursesUserIsLearning/model/index.js","import { utils } from 'pg-promise';\n\nconst camelizeHashKeys = (oldHash) => {\n  const newHash = {};\n  if (oldHash === undefined || oldHash === null) return null;\n  Object.keys(oldHash).forEach((key) => {\n    const camelizedKey = utils.camelize(key);\n    newHash[camelizedKey] = oldHash[key];\n  });\n  return newHash;\n};\n\n// a{ courseUserIsLearning: b{ wow_yes: 1 }, amountOfProblems: 3 }\nconst camelizeColumnsIn = (aOld, asTitlesArray) => {\n  const aNew = {};\n\n  Object.keys(aOld).forEach((key) => {\n    asTitlesArray.includes(key) ?\n      aNew[key] = camelizeHashKeys(aOld[key]) :\n      aNew[key] = aOld[key];\n  });\n\n  return aNew;\n};\n\n// output of row_to_json doesn't get camelized, lets do it manually like so:\n// .then(array => camelizeDbColumns(array, ['course', 'courseUserIsLearning']))\n// http://stackoverflow.com/questions/33023469/node-postgres-and-getting-joined-fields-with-repeated-names\nconst camelizeDbColumns = (arrayOrHash, columnTitlesArray) => {\n  if (Array.isArray(arrayOrHash)) {\n    return arrayOrHash.map(hash =>\n      camelizeColumnsIn(hash, columnTitlesArray)\n    );\n  } else {\n    return camelizeColumnsIn(arrayOrHash, columnTitlesArray);\n  }\n};\n\nexport { camelizeDbColumns };\n\n\n\n// WEBPACK FOOTER //\n// ./services/camelizeDbColumns.js","// CREATE TABLE course (\n//   id SERIAL PRIMARY KEY,\n//   title VARCHAR NOT NULL,\n\n//   user_id INTEGER REFERENCES \"user\" (id) ON DELETE CASCADE NOT NULL\n// );\n\nimport { select } from './select';\nimport { insert } from './insert';\nimport { update } from './update';\nimport { ddelete } from './ddelete';\n\nexport { select, insert, update, ddelete };\n\n\n\n// WEBPACK FOOTER //\n// ./components/courses/model/index.js","module.exports = require(\"chai\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"chai\"\n// module id = 8\n// module chunks = 1 2 3 5 6","import { select } from './select';\nimport { update } from './update';\nimport { insert } from './insert';\nimport { ddelete } from './ddelete';\n\nexport { select, insert, update, ddelete };\n\n\n\n// WEBPACK FOOTER //\n// ./components/problemsUserIsLearning/model/index.js","import { insert } from './insert';\nimport { update } from './update';\nimport { select } from './select';\n\nexport { insert, select, update };\n\n\n\n// WEBPACK FOOTER //\n// ./components/users/model/index.js","const wherePublic = `\n  course.if_public = true\n    AND\n  (\n    SELECT COUNT(problem.id) FROM problem WHERE problem.course_id = course.id\n  ) >= 2\n`;\n\nexport default wherePublic;\n\n\n\n// WEBPACK FOOTER //\n// ./components/courses/model/select/services/wherePublic.js","import { db } from '~/db/init.js';\n\nconst update = (problem, problemId) =>\n  db.one(\n    \"UPDATE problem SET content=${content} WHERE id=${id} RETURNING *\",\n    {\n      content: problem.content,\n      id: problemId\n    }\n  );\n\nimport { insert } from './insert';\nimport { select } from './select';\nimport { ddelete } from './ddelete';\n\nexport { insert, select, update, ddelete };\n\n\n\n// WEBPACK FOOTER //\n// ./components/problems/model/index.js","import { db } from '~/db/init.js';\n\nconst select = {\n  allByCuilId: (cuilId) =>\n    db.any(\n      `\n      SELECT *\n      FROM problem_user_is_learning\n      WHERE\n        problem_user_is_learning.course_user_is_learning_id = \\${cuilId}\n      `,\n      { cuilId }\n    ),\n\n  findByCuilIdAndProblemId: (cuilId, problemId) =>\n    db.one(\n      `SELECT * FROM problem_user_is_learning\n      WHERE course_user_is_learning_id = \\${cuilId} AND problem_id = \\${problemId}`,\n      { cuilId, problemId }\n    )\n};\n\nexport { select };\n\n\n\n// WEBPACK FOOTER //\n// ./components/problemsUserIsLearning/model/select.js","// a{ courseUserIsLearning: b{ wow_yes: 1 }, amountOfProblems: 3 }\nconst integerizeColumnsIn = (aOld, asTitlesArray) => {\n  const aNew = {};\n\n  Object.keys(aOld).forEach((key) => {\n    asTitlesArray.includes(key) ?\n      aNew[key] = parseInt(aOld[key], 10) :\n      aNew[key] = aOld[key];\n  });\n\n  return aNew;\n};\n\n// https://github.com/vitaly-t/pg-promise/issues/118\n// COUNT(3) => to return js integer instead of string\nconst integerizeDbColumns = (arrayOrHash, columnTitlesArray) => {\n  if (Array.isArray(arrayOrHash)) {\n    return arrayOrHash.map(hash =>\n      integerizeColumnsIn(hash, columnTitlesArray)\n    );\n  } else {\n    return integerizeColumnsIn(arrayOrHash, columnTitlesArray);\n  }\n};\n\nexport { integerizeDbColumns };\n\n\n\n// WEBPACK FOOTER //\n// ./services/integerizeDbColumns.js","// ___why not use original method?\n// (http://www.blueraja.com/blog/477/a-better-spaced-repetition-learning-algorithm-sm2)\n// original method resolves into intervals too harsh:\n//\n// { days: 6 },\n// { days: 10 },\n// { days: 30 },\n// { days: 99 },\n// { days: 339 },\n// { days: 1231 },\n// { days: 4724 },\n// { days: 19128 },\n// { days: 24428 }\n\n// memrise\n//\n// 4 hours, 12 hours, 1 day, 6 days, 12 days, 24 days, 48 days, 96 days, 180 days\n\n// mine\n// [ PostgresInterval { hours: 4, minutes: 48 },\n//   PostgresInterval { days: 1, hours: 10, minutes: 59, seconds: 31 },\n//   PostgresInterval { days: 4, hours: 19, minutes: 32, seconds: 9 },\n//   PostgresInterval { days: 8, hours: 20, minutes: 47, seconds: 2 },\n//   PostgresInterval { days: 13, hours: 15, minutes: 53, seconds: 16 },\n//   PostgresInterval { days: 19, hours: 6 },\n//   PostgresInterval { days: 25, hours: 16, minutes: 16, seconds: 19 },\n//   PostgresInterval { days: 32, hours: 23, minutes: 51, seconds: 21 },\n//   PostgresInterval { days: 41, hours: 5, minutes: 54, seconds: 14 },\n//   PostgresInterval { days: 50, hours: 11, minutes: 34, seconds: 4 },\n//   PostgresInterval { days: 60, hours: 18 } ]\n//\n// http://making.duolingo.com/how-we-learn-how-you-learn - what duolingo uses, may be interesting.\n\n// performanceRating: on a scale from 0-5 (0=worst, 5=best)\n// 0.28\nconst getNextScore = (prevEasiness, prevConsecutiveCorrectAnswers, performanceRating) => {\n  const nextEasiness = clipEasiness(\n    prevEasiness +\n    (-0.8) +\n    (0.28 * performanceRating) +\n    (-0.02 * (performanceRating ** 2))\n  );\n\n  const nextConsecutiveCorrectAnswers =\n    isAnswerCorrect(performanceRating) ?\n    prevConsecutiveCorrectAnswers + 1 :\n    0;\n\n  const daysToNextReview = clipDaysToNextReview(\n    isAnswerCorrect(performanceRating) ?\n    // 6 * (nextEasiness ** (nextConsecutiveCorrectAnswers - 1)) :\n    0.2 + (0.2 * ((nextEasiness ** 2.2) * ((nextConsecutiveCorrectAnswers - 1) ** 2.2))) :\n    0.2 // otherwise review it in 4 hours\n  );\n\n  return {\n    easiness: nextEasiness,\n    consecutiveCorrectAnswers: nextConsecutiveCorrectAnswers,\n    daysToNextReview\n  };\n};\n\nconst isAnswerCorrect = (performanceRating) => performanceRating >= 4;\n\n// easiness must be >= 1.3\n// if it's smaller - make it 1.3\nconst clipEasiness = (easiness) => Math.max(easiness, 1.3);\n\nconst clipDaysToNextReview = (days) => Math.min(days, 300);\n\nexport { getNextScore };\n\n\n\n// WEBPACK FOOTER //\n// ./components/problemsUserIsLearning/services/getNextScore.js","const initialScore = () => ({\n  easiness: 2.5,\n  consecutiveCorrectAnswers: 0\n});\n\nexport { initialScore };\n\n\n\n// WEBPACK FOOTER //\n// ./components/problemsUserIsLearning/services/initialScore.js","import { db } from '~/db/init.js';\n\nconst ddelete = {\n  // will delete all problems of this course and all course_user_is_learning\n  destroyCourseWithProblems: (courseId) =>\n    db.none('DELETE FROM course WHERE id=${courseId}', { courseId })\n};\n\nexport { ddelete };\n\n\n\n// WEBPACK FOOTER //\n// ./components/courses/model/ddelete.js","import { db } from '~/db/init.js';\n\nconst insert = {\n  create: (course) =>\n    db.one(\n      \"INSERT INTO course (title, description, if_public, course_category_id, user_id, created_at) \\\n      VALUES (${title}, ${description}, ${ifPublic}, ${courseCategoryId}, ${userId}, timezone('UTC', now())) RETURNING *\",\n      {\n        title: course.title,\n        description: course.description,\n        ifPublic: course.ifPublic,\n        courseCategoryId: course.courseCategoryId || null,\n        userId: course.userId\n      }\n    )\n};\n\nexport { insert };\n\n\n\n// WEBPACK FOOTER //\n// ./components/courses/model/insert.js","import { db } from '~/db/init.js';\nimport { camelizeDbColumns } from '~/services/camelizeDbColumns';\nimport wherePublic from './services/wherePublic';\nimport getCoursesWithStats from './services/getCoursesWithStats';\n\nconst select = {\n  allCreated: (userId) =>\n    getCoursesWithStats({\n      where: `WHERE course.user_id = \\${userId}`,\n      params: { userId }\n    }),\n\n  // for /profile. returns all courses userId is currently learning.\n  // only active,\n  // filtered by amount of due problems (TODO)\n  allLearned: (userId) =>\n    getCoursesWithStats({\n      where: ` WHERE course_user_is_learning.user_id = \\${userId} AND course_user_is_learning.active = true`,\n      orderBy: `\n        ORDER BY\n          amount_of_problems_to_review DESC,\n          amount_of_problems_to_learn DESC,\n          next_due_date_in ASC\n      `,\n      params: { userId }\n    }),\n\n  // all public courses with 2 or more problems,\n  // sorted by amount of learners\n  // @sortBy = ['popular', 'new']\n  allPublic: ({ sortBy, limit, offset, courseCategoryId }) =>\n    db.any(\n      `\n      SELECT\n        row_to_json(course.*) AS course,\n        COUNT(distinct course_user_is_learning.user_id) AS amount_of_users_learning_this_course,\n        COUNT(distinct problem.id) AS amount_of_problems\n      FROM course\n      LEFT OUTER JOIN course_user_is_learning\n        ON (\n          course_user_is_learning.active = true\n          AND\n          course.id = course_user_is_learning.course_id\n        )\n      INNER JOIN problem\n        ON problem.course_id = course.id\n      WHERE\n        ${wherePublic}\n        ${courseCategoryId ? `AND course.course_category_id = ${courseCategoryId}` : ''}\n      GROUP BY course.id\n      ${\n        sortBy === 'popular' ?\n          `\n          ORDER BY\n            amount_of_users_learning_this_course DESC,\n            amount_of_problems DESC\n          ` :\n          `ORDER BY course.created_at DESC`\n      }\n      LIMIT ${limit}\n      OFFSET ${offset}\n      `\n    )\n      .then((array) => camelizeDbColumns(array, ['course'])),\n\n  countAllPublic: ({ courseCategoryId }) =>\n    db.one(\n      `\n      SELECT\n        COUNT(course.id) as amount_of_public_courses\n      FROM course\n      WHERE\n        ${wherePublic}\n        ${courseCategoryId ? `AND course.course_category_id = ${courseCategoryId}` : ''}\n      `\n    )\n      .then((result) => result.amountOfPublicCourses),\n\n  oneForActions: (id, userId) =>\n    getCoursesWithStats({\n      where: 'WHERE course.id = ${courseId}',\n      params: { userId, courseId: id }\n    })\n      .then((array) => array[0]),\n\n  getCourseStats: (id) =>\n    db.one(\n      `\n      SELECT\n        COUNT(distinct course_user_is_learning.user_id) AS amount_of_users_learning_this_course,\n        COUNT(distinct problem.id) AS amount_of_problems\n      FROM course\n      LEFT JOIN course_user_is_learning\n        ON (\n          course_user_is_learning.active = true\n          AND\n          course.id = course_user_is_learning.course_id\n        )\n      LEFT JOIN problem\n        ON problem.course_id = course.id\n      WHERE course.id = \\${id}\n      GROUP BY course.id\n      `,\n      { id }\n    ),\n\n  oneById: (id) =>\n    db.one(\n      `\n      SELECT *\n      FROM course\n      WHERE course.id = \\${id}\n      `,\n      { id }\n    ),\n\n  search: (userId, searchString) =>\n    getCoursesWithStats({\n      where: `\n        WHERE\n          (\n            course.title ILIKE \\${searchString} OR\n            course.description ILIKE \\${searchString}\n          )\n            AND\n          ( -- either public or created by me\n            course.user_id = \\${userId} OR\n            ${wherePublic}\n          )\n      `,\n      orderBy: `\n        ORDER BY\n          -- if matches by description instead of by title - place last\n          CASE\n            WHEN course.title ILIKE \\${searchString}\n            THEN 1 ELSE 0\n          END DESC,\n          CASE\n            WHEN course_user_is_learning.active = true\n            THEN 1 ELSE 0\n          END DESC,\n          CASE\n            WHEN course_user_is_learning.user_id = \\${userId}\n            THEN 1 ELSE 0\n          END DESC,\n          CASE\n            WHEN course.user_id = \\${userId}\n            THEN 1 ELSE 0\n          END DESC,\n          amount_of_problems_to_review DESC,\n          amount_of_problems_to_learn DESC,\n          next_due_date_in ASC\n        LIMIT 10\n      `,\n      params: { userId, searchString: `%${searchString}%` }\n    }),\n};\n\nexport { select };\n\n\n\n// WEBPACK FOOTER //\n// ./components/courses/model/select/index.js","import { db } from '~/db/init.js';\nimport { integerizeDbColumns } from '~/services/integerizeDbColumns';\nimport { camelizeDbColumns } from '~/services/camelizeDbColumns';\n\n// fetch course, courseUserAndLearning etc if it exists\n//\n// problemsToReview - later.\n//   basically problem_user_is_learning with nextDueDate < Time.now\n// problemsToLearn\n//   all problems of this course MINUS learned problem_user_is_learning of this course\n//\n// => [{\n//   course,\n//   courseUserIsLearning,\n//   amountOfProblemsToReview: 3,\n//   amountOfProblemsToLearn: 2,\n// }]\nconst getCoursesWithStats = ({ where = '', orderBy = '', params = {} } = {}) =>\n  db.any(\n    `SELECT\n      row_to_json(course.*)                  AS course,\n      row_to_json(course_user_is_learning.*) AS course_user_is_learning,\n      COUNT(distinct problem_user_is_learning.id) AS amount_of_problems_to_review,\n      (\n        (SELECT COUNT(problem.*) FROM problem WHERE problem.course_id = course.id) -\n        (SELECT COUNT(problem_user_is_learning.*) FROM problem_user_is_learning WHERE problem_user_is_learning.course_user_is_learning_id = course_user_is_learning.id)\n      )                                      AS amount_of_problems_to_learn,\n      COUNT(distinct problem.id)             AS amount_of_problems,\n      (\n        (\n          SELECT MIN(problem_user_is_learning.next_due_date)\n          FROM problem_user_is_learning\n          WHERE\n            (\n              problem_user_is_learning.course_user_is_learning_id = course_user_is_learning.id\n                AND\n              problem_user_is_learning.if_ignored = false\n            )\n        )\n          -\n        timezone('UTC', now())\n      )                                      AS next_due_date_in\n\n    FROM course\n\n    -- course_user_is_learning\n    LEFT OUTER JOIN course_user_is_learning\n      ON (\n        course_user_is_learning.course_id = course.id\n        AND\n        course_user_is_learning.user_id = \\${userId}\n      )\n\n    -- amount_of_problems_to_review\n    LEFT OUTER JOIN problem_user_is_learning\n      ON (\n        course_user_is_learning.id = problem_user_is_learning.course_user_is_learning_id\n        AND\n        problem_user_is_learning.next_due_date < timezone('UTC', now())\n        AND\n        problem_user_is_learning.if_ignored = false\n      )\n\n    -- amount_of_problems\n    LEFT OUTER JOIN problem ON problem.course_id = course.id\n\n    ${where}\n\n    GROUP BY course_user_is_learning.id, course.id\n\n    ${orderBy}\n    `,\n    params\n  )\n    .then((array) => camelizeDbColumns(array, ['course', 'courseUserIsLearning']))\n    .then((array) => integerizeDbColumns(array, ['amountOfProblemsToReview', 'amountOfProblemsToLearn', 'amountOfProblems']));\n\nexport default getCoursesWithStats;\n\n\n\n// WEBPACK FOOTER //\n// ./components/courses/model/select/services/getCoursesWithStats.js","import { db } from '~/db/init.js';\n\nconst update = {\n  update: (id, values) =>\n    db.one(\n      `\n      UPDATE course\n      SET\n        title = \\${title},\n        description = \\${description},\n        if_public = \\${ifPublic},\n        course_category_id = \\${courseCategoryId}\n      WHERE id = \\${id}\n      RETURNING *\n      `,\n      {\n        ...values,\n        id\n      }\n    )\n};\n\nexport { update };\n\n\n\n// WEBPACK FOOTER //\n// ./components/courses/model/update.js","import { db } from '~/db/init.js';\nimport { requireKeys } from '~/services/requireKeys';\n\nconst insert = {\n  createFrom: (oauthProvider, oauthProfile) => {\n    switch (oauthProvider) {\n      case 'github':\n        return insert.create({\n          oauthProvider: 'github',\n          oauthId: oauthProfile.id.toString(),\n          username: oauthProfile.login,\n          avatarUrl: oauthProfile.avatar_url,\n          email: oauthProfile.email\n        });\n      case 'google':\n        return insert.create({\n          oauthProvider: 'google',\n          oauthId: oauthProfile.id.toString(),\n          username: oauthProfile.name,\n          avatarUrl: oauthProfile.picture,\n          email: oauthProfile.email\n        });\n      default:\n        throw new Error(`No such oauthProvider as '${oauthProvider}'.`);\n    }\n  },\n\n  create: requireKeys(['oauthProvider', 'oauthId', 'username', 'avatarUrl', 'email'],\n    (user) =>\n      db.one(\n        `\n        INSERT INTO \"user\"\n          (\n            oauth_provider, oauth_id,\n            username, avatar_url, email,\n            created_at\n          )\n        VALUES\n          (\n            \\${oauthProvider}, \\${oauthId},\n            \\${username}, \\${avatarUrl}, \\${email},\n            timezone('UTC', now())\n          )\n        RETURNING *\n        `,\n        {\n          oauthProvider: user.oauthProvider,\n          oauthId: user.oauthId,\n          username: user.username,\n          avatarUrl: user.avatarUrl,\n          email: user.email\n        }\n      )\n  )\n};\n\nexport { insert };\n\n\n\n// WEBPACK FOOTER //\n// ./components/users/model/insert.js","import { db } from '~/db/init.js';\n\nconst select = {\n  // getUserByOauth('github', 7578559)\n  // => user\n  oneByOauth: (oauthProvider, oauthId) =>\n    db.oneOrNone(\n      'SELECT * FROM \"user\" WHERE oauth_provider=${oauthProvider} and oauth_id=${oauthId}',\n      {\n        oauthProvider,\n        oauthId: oauthId.toString()\n      }\n    ),\n\n  one: (id) =>\n    db.one(\n      `SELECT * FROM \"user\" WHERE id = \\${id}`,\n      { id }\n    )\n};\n\nexport { select };\n\n\n\n// WEBPACK FOOTER //\n// ./components/users/model/select.js","import { db } from '~/db/init.js';\n\nconst update = {\n  update: (id, email) =>\n    db.one(\n      `\n        UPDATE \"user\"\n        SET email = \\${email}\n        WHERE id = \\${id}\n        RETURNING *\n      `,\n      { id, email }\n    )\n};\n\nexport { update };\n\n\n\n// WEBPACK FOOTER //\n// ./components/users/model/update.js","import { db } from '~/db/init.js';\nimport { requireKeys } from '~/services/requireKeys';\n\nconst insert = {\n  create: requireKeys(['active', 'courseId', 'userId'],\n    (cuilFields) =>\n      db.one(\n        `INSERT INTO course_user_is_learning\n        (active, course_id, user_id, started_learning_at) VALUES\n        (\\${active}, \\${courseId}, \\${userId}, timezone('UTC', now()))\n        RETURNING *`,\n        cuilFields\n      )\n  )\n};\n\nexport { insert };\n\n\n\n// WEBPACK FOOTER //\n// ./components/coursesUserIsLearning/model/insert.js","import { db } from '~/db/init.js';\n\nconst select = {\n  oneByCourseIdAndUserId: (courseId, userId) =>\n    db.one(\n      `\n        SELECT *\n        FROM course_user_is_learning\n        WHERE course_id = \\${courseId} AND user_id = \\${userId}\n      `,\n      { courseId, userId }\n    ),\n\n  problemsToReview: (id) =>\n    db.any(\n      `\n      SELECT *\n      FROM problem\n      WHERE problem.id IN (\n        SELECT problem_user_is_learning.problem_id\n        FROM problem_user_is_learning\n        WHERE (\n            problem_user_is_learning.course_user_is_learning_id = \\${id}\n          AND\n            problem_user_is_learning.next_due_date < timezone('UTC', now())\n          AND\n            problem_user_is_learning.if_ignored = false\n        )\n      )\n      `,\n      { id }\n    ),\n\n  // {\n  //   1: {\n  //     toLearn: [1, 3, 4],\n  //     toReview: [5]\n  //   },\n  //   43: {\n  //     toLearn: [],\n  //     toReview: [2]\n  //   }\n  // }\n  idsOfProblemsToLearnAndReviewPerCourse: async (userId) => {\n    // all courses listed\n    // => [{ id: 3, toReview: [] }, ...]\n    const toReview = await db.any(\n      `\n      SELECT\n        course.id AS id,\n        COALESCE(json_agg(problem_user_is_learning.problem_id) FILTER (WHERE problem_user_is_learning.problem_id IS NOT NULL), '[]') AS to_review\n\n      FROM course_user_is_learning\n\n      INNER JOIN course\n        ON course_user_is_learning.course_id = course.id\n\n      LEFT JOIN problem_user_is_learning\n        ON (\n            problem_user_is_learning.course_user_is_learning_id = course_user_is_learning.id\n          AND\n            problem_user_is_learning.next_due_date < timezone('UTC', now())\n          AND\n            problem_user_is_learning.if_ignored = false\n        )\n\n      WHERE\n          course_user_is_learning.user_id = \\${userId}\n        AND\n          course_user_is_learning.active = true\n      GROUP BY course.id\n      `,\n      { userId }\n    );\n\n    // only those who have what to learn\n    // => [{ id: 4, toLearn: [3, 65] }]\n    const toLearn = await db.any(\n      `\n      SELECT\n        course.id AS id,\n        COALESCE(json_agg(problem.id) FILTER (WHERE problem.id IS NOT NULL), '[]') AS to_learn\n\n      FROM course_user_is_learning\n\n      INNER JOIN course\n        ON course_user_is_learning.course_id = course.id\n\n      LEFT JOIN problem\n        ON problem.course_id = course.id\n\n      WHERE\n          course_user_is_learning.user_id = \\${userId}\n        AND\n          course_user_is_learning.active = true\n        AND\n          -- problems in this course\n          problem.id\n          NOT IN\n          -- minus problems user is already learning\n          (\n            SELECT problem_user_is_learning.problem_id\n            FROM problem_user_is_learning\n            WHERE problem_user_is_learning.course_user_is_learning_id = course_user_is_learning.id\n          )\n      GROUP BY course.id\n      `,\n      { userId }\n    );\n\n    const toLearnToReviewResponse = {};\n    toReview.forEach((toReviewResponse) => {\n      const correspondingToLearnResponse = toLearn\n        .find((toLearnResponse) => toLearnResponse.id === toReviewResponse.id);\n\n      toLearnToReviewResponse[toReviewResponse.id] = {\n        toReview: toReviewResponse.toReview,\n        toLearn: correspondingToLearnResponse ? correspondingToLearnResponse.toLearn : []\n      };\n    });\n\n    return toLearnToReviewResponse;\n  }\n};\n\nexport { select };\n\n\n\n// WEBPACK FOOTER //\n// ./components/coursesUserIsLearning/model/select/index.js","import { db } from '~/db/init.js';\n\nconst update = {\n  ifActive: (id, ifActive) =>\n    db.one(\n      \"UPDATE course_user_is_learning \\\n      SET active = ${active} \\\n      WHERE id = ${id} \\\n      RETURNING *\",\n      { active: ifActive, id }\n    )\n};\n\nexport { update };\n\n\n\n// WEBPACK FOOTER //\n// ./components/coursesUserIsLearning/model/update.js","import { db } from '~/db/init.js';\n\nconst ddelete = {\n  deleteMany: (problemIds) =>\n    db.none(\n      `\n      DELETE FROM problem\n      WHERE id IN (${problemIds})\n      `\n    )\n};\n\nexport { ddelete };\n\n\n\n// WEBPACK FOOTER //\n// ./components/problems/model/ddelete.js","import { db } from '~/db/init.js';\nimport { requireKeys } from '~/services/requireKeys';\n\nconst insert = {\n  // we don't need to create problem_user_is_learning for every user who learns this course, because problem_user_is_learning is only for already learnt problems\n  create: requireKeys(['type', 'content', 'courseId'],\n    ({ type, content, courseId }) =>\n      db.one(\n        \"INSERT INTO problem (type, content, course_id, created_at) VALUES (${type}, ${content}, ${courseId}, timezone('UTC', now())) RETURNING *\",\n        {\n          type,\n          content,\n          courseId\n        }\n      )\n  ),\n\n  createManyFromExcel: (courseId, problems) =>\n    db.tx((transaction) => {\n      const queries = problems.map((problem) =>\n        transaction.none(\n          \"INSERT INTO problem (type, content, course_id, created_at) VALUES (${type}, ${content}, ${courseId}, timezone('UTC', now()))\",\n          {\n            type: 'separateAnswer',\n            content: {\n              content: problem.content,\n              answer: problem.answer\n            },\n            courseId\n          }\n        )\n      );\n      return transaction.batch(queries);\n    }),\n\n  moveToCourseMany: (problemIds, courseId) => {\n    const promises = problemIds.map((problemId) => {\n      const problemPromise = db.one('SELECT * FROM problem WHERE id = ${problemId}', { problemId });\n      return problemPromise.then((problem) =>\n        Promise.all([\n          insert.create({\n            type: problem.type,\n            content: problem.content,\n            courseId\n          }),\n          db.none('delete from problem where id=${problemId}', { problemId })\n        ])\n      );\n    });\n    return Promise.all(promises);\n  }\n};\n\nexport { insert };\n\n\n\n// WEBPACK FOOTER //\n// ./components/problems/model/insert.js","import { db } from '~/db/init.js';\n\nconst select = {\n  one: (id) =>\n    db.one(\n      'SELECT * FROM problem WHERE id = ${id}',\n      { id }\n    ),\n  allByCourseId: (courseId) =>\n    db.any(\n      'SELECT * FROM problem WHERE course_id = ${courseId} ORDER BY created_at',\n      { courseId }\n    ),\n  all: () =>\n    db.any('SELECT * FROM problem')\n};\n\nexport { select };\n\n\n\n// WEBPACK FOOTER //\n// ./components/problems/model/select.js","import { db } from '~/db/init.js';\n\nconst ddelete = {\n  ddelete: (id) =>\n    db.none('DELETE FROM problem_user_is_learning WHERE id=${id}', { id })\n};\n\nexport { ddelete };\n\n\n\n// WEBPACK FOOTER //\n// ./components/problemsUserIsLearning/model/ddelete.js","import { db } from '~/db/init.js';\nimport { requireKeys } from '~/services/requireKeys';\nimport { initialScore } from '../services/initialScore';\n\nconst insert = {\n  create: requireKeys(['courseUserIsLearningId', 'problemId'],\n    ({ courseUserIsLearningId, problemId, ifIgnored }) =>\n      db.one(\n        `\n        INSERT INTO problem_user_is_learning\n        (easiness, consecutive_correct_answers, next_due_date, course_user_is_learning_id, problem_id, if_ignored) VALUES\n        (\\${easiness}, \\${consecutiveCorrectAnswers}, timezone('UTC', now()), \\${courseUserIsLearningId}, \\${problemId}, \\${ifIgnored})\n        RETURNING *\n        `,\n        {\n          easiness: initialScore().easiness,\n          consecutiveCorrectAnswers: initialScore().consecutiveCorrectAnswers,\n          ifIgnored: ifIgnored || false,\n          courseUserIsLearningId,\n          problemId\n        }\n      )\n  )\n};\n\nexport { insert };\n\n\n\n// WEBPACK FOOTER //\n// ./components/problemsUserIsLearning/model/insert.js","import { db } from '~/db/init.js';\nimport { getNextScore } from '../services/getNextScore';\nimport { select } from './select';\n\nconst update = {\n  // solve particular problem\n  // performanceRating: 0-5\n  review: async (courseUserIsLearningId, problemId, performanceRating) => {\n    const me = await select.findByCuilIdAndProblemId(courseUserIsLearningId, problemId);\n    const nextScore = getNextScore(me.easiness, me.consecutiveCorrectAnswers, performanceRating);\n\n    return db.one(\n      `\n      UPDATE problem_user_is_learning\n      SET easiness = \\${easiness},\n          consecutive_correct_answers = \\${consecutiveCorrectAnswers},\n          next_due_date = timezone('UTC', (now() + '${nextScore.daysToNextReview} days'::INTERVAL)),\n          last_reviewed_at = timezone('UTC', now())\n      WHERE id = \\${id}\n      RETURNING *\n      `,\n      {\n        easiness: nextScore.easiness,\n        consecutiveCorrectAnswers: nextScore.consecutiveCorrectAnswers,\n        id: me.id\n      }\n    );\n  },\n\n  ignore: (id) =>\n    db.one(\n      `\n      UPDATE problem_user_is_learning\n      SET if_ignored = true\n      WHERE id = \\${id}\n      RETURNING *\n      `,\n      { id }\n    )\n};\n\nexport { update };\n\n\n\n// WEBPACK FOOTER //\n// ./components/problemsUserIsLearning/model/update.js","import * as User from '~/components/users/model';\nimport * as Course from '~/components/courses/model';\nimport * as Problem from '~/components/problems/model';\nimport * as CourseUserIsLearning from '~/components/coursesUserIsLearning/model';\nimport * as ProblemUserIsLearning from '~/components/problemsUserIsLearning/model';\n\nimport { requireKeys } from '~/services/requireKeys';\n\nlet uniqueIndex = 1;\n\nconst RawFactory = {\n  user: (userFields) => {\n    uniqueIndex++;\n    return User.insert.create({\n      oauthProvider: 'github',\n      oauthId: uniqueIndex, // oauthId, not real one. still needs to be unique\n      username: 'lakesare',\n      avatarUrl: 'hi.png',\n      email: 'lake@gmail.com',\n      ...userFields\n    });\n  },\n\n  // required: userId\n  course: requireKeys(['userId'],\n    (courseFields) =>\n      Course.insert.create(\n        {\n          title: 'React',\n          description: 'Js framework',\n          ifPublic: true,\n          ...courseFields\n        }\n      )\n  ),\n\n  problem: requireKeys(['courseId'],\n    (problemFields) =>\n      Problem.insert.create({\n        type: 'inlinedAnswers',\n        content: {\n          content: '2+2',\n          answer: '4'\n        },\n        ...problemFields\n      })\n  ),\n\n  courseUserIsLearning: requireKeys(['courseId', 'userId'],\n    (cuilFields) =>\n      CourseUserIsLearning.insert.create({\n        active: true,\n        ...cuilFields\n      })\n  ),\n\n  problemUserIsLearning: requireKeys(['problemId', 'courseUserIsLearningId'],\n    (puilFields) =>\n      ProblemUserIsLearning.insert.create({\n        ...puilFields\n      })\n  )\n};\n\nconst Factory = {\n  // problemUserIsLearning: async (puilFields) => {\n  //   const user    = await RawFactory.user();\n  //   const course  = await RawFactory.course({ userId: user.id });\n  //   const cuil    = await RawFactory.courseUserIsLearning({ courseId: course.id, userId: user.id });\n  //   const problem = await RawFactory.problem({ courseId: course.id });\n  //   const puil    = await RawFactory.problemUserIsLearning({ problemId: problem.id, courseUserIsLearningId: cuil.id });\n  //   return puil;\n  // },\n\n  course: async (courseFields) => {\n    const user = await RawFactory.user({});\n    const course = await RawFactory.course({\n      userId: user.id,\n      ...courseFields\n    });\n    return course;\n  },\n\n  // kind of course that gets returned in /courses\n  publicCourse: async (courseFields) => {\n    const user = await RawFactory.user();\n    const course = await RawFactory.course({\n      userId: user.id,\n      ifPublic: true,\n      ...courseFields\n    });\n    await RawFactory.problem({ courseId: course.id });\n    await RawFactory.problem({ courseId: course.id });\n    return course;\n  }\n};\n\nexport { RawFactory, Factory };\n\n\n\n// WEBPACK FOOTER //\n// ./test/services/Factory.js","import { expect } from 'chai';\n\nimport { db } from '~/db/init';\nimport { Factory, RawFactory } from '~/test/services/Factory';\n\nimport * as CourseUserIsLearning from '../index';\nimport * as ProblemUserIsLearning from '~/components/problemsUserIsLearning/model';\n\ndescribe('coursesUserIsLearning:model:select', () => {\n  describe('idsOfProblemsToLearnAndReviewPerCourse', () => {\n    beforeEach('truncating db', async () =>\n      db.none('TRUNCATE TABLE problem, course, \"user\", problem_user_is_learning, course_user_is_learning RESTART IDENTITY CASCADE')\n    );\n\n    it('=> {} for new users', async () => {\n      const user = await RawFactory.user({});\n      const result = CourseUserIsLearning.select.idsOfProblemsToLearnAndReviewPerCourse(user.id);\n      expect(result).to.deep.equal({});\n    });\n\n    it('=> toLearn: [problemId] after user starts learning a course', async () => {\n      // create user\n      const user = await RawFactory.user({});\n\n      // create course with 1 problem\n      const course = await Factory.course({});\n      const problem = await RawFactory.problem({ courseId: course.id });\n\n      // make user learn this course\n      await RawFactory.courseUserIsLearning({\n        courseId: course.id,\n        userId: user.id,\n        active: true\n      });\n\n      const result = await CourseUserIsLearning.select.idsOfProblemsToLearnAndReviewPerCourse(user.id);\n      expect(result).to.deep.equal({ [course.id]: { toLearn: [problem.id], toReview: [] } });\n    });\n\n    it('=> toReview: [problemId] after user learned a problem', async () => {\n      // create user\n      const user = await RawFactory.user({});\n\n      // create course with 2 problems\n      const course = await Factory.course({});\n      const problem_1 = await RawFactory.problem({ courseId: course.id });\n      const problem_2 = await RawFactory.problem({ courseId: course.id });\n\n      // make user learn this course\n      const cuil = await RawFactory.courseUserIsLearning({\n        courseId: course.id,\n        userId: user.id,\n        active: true\n      });\n\n      // learn one problem\n      await ProblemUserIsLearning.insert.create({\n        courseUserIsLearningId: cuil.id,\n        problemId: problem_1.id\n      });\n\n      const result = await CourseUserIsLearning.select.idsOfProblemsToLearnAndReviewPerCourse(user.id);\n      expect(result).to.deep.equal({ [course.id]: { toLearn: [problem_2.id], toReview: [problem_1.id] } });\n    });\n\n    it('=> toLearn: [] for course with no problems', async () => {\n      // create user\n      const user = await RawFactory.user({});\n\n      // create course without problems\n      const course = await Factory.course({});\n\n      // make user learn this course\n      await RawFactory.courseUserIsLearning({\n        courseId: course.id,\n        userId: user.id,\n        active: true\n      });\n\n      const result = await CourseUserIsLearning.select.idsOfProblemsToLearnAndReviewPerCourse(user.id);\n      expect(result).to.deep.equal({ [course.id]: { toLearn: [], toReview: [] } });\n    });\n\n    it('=> toReview, toLearn: [no ignored problemId] if user ignores a problem', async () => {\n      // // create user\n      const user = await RawFactory.user({});\n\n      // // create course with 2 problems\n      const course = await Factory.course({});\n      const problem_1 = await RawFactory.problem({ courseId: course.id });\n      const problem_2 = await RawFactory.problem({ courseId: course.id });\n      const problem_3 = await RawFactory.problem({ courseId: course.id });\n\n      // make user learn this course\n      const cuil = await RawFactory.courseUserIsLearning({\n        courseId: course.id,\n        userId: user.id,\n        active: true\n      });\n\n      // ignore problem_1\n      await RawFactory.problemUserIsLearning({ courseUserIsLearningId: cuil.id, problemId: problem_1.id, ifIgnored: true });\n      // learn problem_2\n      await RawFactory.problemUserIsLearning({ courseUserIsLearningId: cuil.id, problemId: problem_2.id });\n      // leave problem_3 alone\n\n      const result = await CourseUserIsLearning.select.idsOfProblemsToLearnAndReviewPerCourse(user.id);\n      expect(result).to.deep.equal({ [course.id]: { toLearn: [problem_3.id], toReview: [problem_2.id] } });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./components/coursesUserIsLearning/model/select/index.test.js"],"sourceRoot":""}